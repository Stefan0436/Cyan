plugins {
    id 'java'
	id 'maven-publish'
}

apply plugin: 'eclipse'
apply from: '../asf.mvn.publish.gradle'
buildDir = '../build/ClassTrust'

group="org.asf.cyan"
version="1.0.0.A3"
def authorname = "AerialWorks Software Foundation"

sourceCompatibility = '1.9'
targetCompatibility = '1.9'

configurePublish {
	pretty_name "ClassTrust"
	description "Cyan Trust API"
	page "https://aerialworks.ddns.net/maven"
	address "https://aerialworks.ddns.net/maven"
	
	author {
		name "$authorname"
		id "ASF"
	}
	
	license {
		name "GNU Lesser General Public License v3.0"
		url "https://www.gnu.org/licenses/lgpl-3.0.txt"
	}
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    testImplementation 'junit:junit:4.12'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.0'
	
	implementation project(":CyanUtil")
}

jar {
	destinationDirectory = file('../build/ClassTrust/Jars')
	manifest {
		attributes([
			"Specification-Title": project.name,
			"Specification-Vendor": "${authorname}",
			"Specification-Version": project.version,
			"Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Implementation-Vendor" :"${authorname}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
	exclude "**/extra/**"
	exclude "**/tests/**"
	includeEmptyDirs = false
}

task javaDocs(type: Javadoc) {
	classpath = sourceSets.main.runtimeClasspath
	source = sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: 'javaDocs') {
	from javadoc
	classifier = 'javadoc'
	exclude "**/extra/**"
	destinationDirectory = file('../build/ClassTrust/Javadocs')
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
	exclude "**/extra/**"
	destinationDirectory = file('../build/ClassTrust/Source jars')
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

test {
    include "**/**Test**"
    exclude "**/**SpecialTest**"
    minHeapSize = "128m"
  	maxHeapSize = "2G"
}

task specialTest (type: Test, dependsOn: test) {
    include "**/**SpecialTest**"
    minHeapSize = "128m"
  	maxHeapSize = "2G"
}

initializeASFMVNPublish()
