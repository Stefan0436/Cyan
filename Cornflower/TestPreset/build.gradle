buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath files("../../build/Cornflower/resources/main")
		classpath files("../bin/main")
	}
}

plugins {
	id 'java'
}

version="1.0.0.A1"

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.asf.cyan.cornflower'

platforms {
	// Needs to be present when using RIFT.
	// Minecraft VANILLA platform
	VANILLA {
		// Game version
		version "1.16.5"
	}

	// MCP platform, for forge support
	MCP {
		// YYYYMMDD.HHMMSS, should match upstream forge
		version "20210115.111550"

		// Forge version
		modloader "36.1.4"
	}

	// Yarn platform, for fabric support
	YARN {
		// Build version for YARN,
		// Search for matching game version in http://maven.modmuss50.me/net/fabricmc/yarn/maven-metadata.xml
		// Or use getYarnVersion("game-version") to do so automatically
		version "1.16.5+build.6" // getYarnVersion("1.16.5")

		// Fabric version
		// For latest, use getLatestFabricVersion("game-version")
		modloader "0.11.3" // getLatestFabricVersion("1.16.5")
	}

	// Spigot platform, for paper support
	SPIGOT {
		// SPIGOT mappings version, it is best to only use mappings that have been given a green light by the Cyan team.
		//
		// Use getRecommendedSpigotMappings("game-version") for the mappings that have been given a green light
		// Use getLatestSpigotMappings("game-version") for mappings in pre-release testing stage
		// Use getTestingSpigotMappings("game-version") for mappings in early testing stage (unrecommended, can really break things)
		//
		//
		// If you really want the latest version, you can use the following.
		// USE AT YOUR OWN RISK, CYAN WON'T BE HELD RESPONSIBLE FOR DAMAGED WORLDS.
		//
		// For the latest remote, use getRemoteSpigotMappingsVersion("game-version")
		//
		//
		// Commit hash and craftbukkit build for mappings version (commit:craftbukkit)
		version "f0a5ed1aeff8156ba4afa504e190c838dd1af50c:1_16_R3" // getRecommendedSpigotMappings("1.16.5")

		// Paper version, only use paper version compatible with the mappings,
		//
		// Use getPaperVersion("mappings-version") to retrieve the latest paper version that has been
		// registered as 'compatible with mappings' in the generic version manifest of CYAN.
		//
		// Use getPaperVersionByDate("game-vesion", "mappings-version") to retrieve the paper version with date
		// aproximatly matching the mappings publish date. (USE AT YOUR OWN RISK, SCRAPES SPIGOT WEB PAGE FOR DATE
		// AND RECURSES THROUGH PAPER VERSIONS TO FIND THE UPDATE, PLEASE STORE VALUE AND USE AS LEAST AS POSSIBLE)
		//
		// Paper version
		modloader "593" // getPaperVersion("f0a5ed1aeff8156ba4afa504e190c838dd1af50c:1_16_R3")
	}
}

// Adds RIFT tasks for the platforms
addPlatformRiftTasks {
	platform platforms
	from tasks.jar.getArchiveFile()
}

ctc {
	method uctc

	source tasks.jar.getArchiveFile()

	source tasks.vanillaRift.getArchiveFile()
	source tasks.vanillaRiftServer.getArchiveFile()

	source tasks.mcpRift.getArchiveFile()
	source tasks.mcpRiftServer.getArchiveFile()

	source tasks.yarnRift.getArchiveFile()
	source tasks.yarnRiftServer.getArchiveFile()

	source tasks.spigotRiftServer.getArchiveFile()

	destination "$buildDir/uctc/Main Trust"
}

task ctcPack (type: CtcUtil) {
	method pack
	createHash true

	source "$buildDir/uctc/Main Trust"
	destination genOutputName(new File(buildDir, "ctcs"), "Main Trust")
}

dependencies {
	// Selects modloader dependencies:
	// 2 = Base Moddidng
	// 4 = CyanUtil
	// 8 = Core Modding (includes modding)
	// 16 = FLUID
	implementation Modloader.forModloader("cyan", 4 | 8 | 16)

	// Selects game dependencies
	implementation Game.forGame("Minecraft", "1.16.5")
}

cmf {
	manifest {
		modfileManifest {
			modid "examplecoremod"
			modgroup "org.example"
			
			mod_class "ExampleCoremod"
			mod_package "org.example.examplemod"

			display_name "Example Coremod"
			mod_version project.version

			description 'Example Coremod'
			platform platforms

			jar tasks.jar.getArchiveFile()
			jar riftTasks

			maven_dependency remoteDependencies

			trust_container tasks.ctcPack, "https://aerialworks.ddns.net/cyan/trust/download"
		}
	}

	archiveVersion = project.version
	archiveExtension = 'ccmf'
	destinationDirectory = file("$buildDir/ccmf")
}

rift.dependsOn jar
build.finalizedBy rift
rift.finalizedBy ctc
ctc.dependsOn rift
ctc.finalizedBy ctcPack
ctcPack.dependsOn ctc
ctcPack.finalizedBy cmf
cmf.dependsOn ctcPack
