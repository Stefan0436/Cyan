buildscript {
	repositories {
		mavenCentral()
		maven { name = "AerialWorks"; url = "https://aerialworks.ddns.net/maven" }
	}
	dependencies {
		classpath 'org.asf.cyan.cornflower:Cornflower:1.0.0.A35'
	}
}

plugins {
	id 'java'
	id 'maven-publish'
}

apply from: '../config.gradle'

group="org.asf.cyan"
def authorname="AerialWorks Software Foundation"
version=cyanversion

apply from: '../asf.mvn.publish.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.asf.cyan.cornflower'

createEclipseLaunches {
	disable = true
}

sourceCompatibility = '1.9'
targetCompatibility = '1.9'	

buildDir = '../build/CyanLoader'

task createCyanSourceZip(type: Zip, dependsOn: 'prepareSourceZip') {
	from file(buildDir.getCanonicalPath()+"/git-output")
	destinationDirectory = file('../build/CyanLoader/Zips')
	classifier 'FULL-SOURCES'
}

jar.dependsOn('processResources')

repositories {
	mavenCentral()
	maven { url = 'https://repo.spongepowered.org/maven' }
	maven { name = "AerialWorks"; url = "https://aerialworks.ddns.net/maven" }
}

dependencies {	
	implementation project(':CyanComponents')
	implementation project(':CyanCore')
	implementation project(':MTK')
	implementation project(':Fluid')
	implementation project(':CyanUtil')
	implementation project(':CCFG')
	implementation project(':ClassTrust')
	implementation (project(':ModKit')) {
        exclude group: '', module: 'server'
        exclude group: '', module: 'client'
	}

	implementation 'org.asf.aos.util.service:aosutil-service-SLIB-UTIL:0.0.0.13'

	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.0'
	
	implementation 'org.ow2.asm:asm:9.1'
	implementation 'org.ow2.asm:asm-tree:9.1'
	implementation 'org.ow2.asm:asm-commons:9.1'

	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	testImplementation 'junit:junit:4.12'
}

jar {
	destinationDirectory = file('../build/CyanLoader/Jars')
	manifest {
		attributes([
			"Specification-Title": project.name,
			"Specification-Vendor": "${authorname}",
			"Specification-Version": project.version,
			"Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Implementation-Vendor" :"${authorname}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
	exclude "**/extra/**"
	exclude "**/tests/**"
	exclude "**/log4j2.xml"
	includeEmptyDirs = false
}

task coremodAPIJar(type: Jar) {
	archiveBaseName = "CyanCoreModding"
	from sourceSets.main.output
	destinationDirectory = file('../build/CyanLoader/API/Coremods')
	manifest {
		attributes([
			"Specification-Title": project.name,
			"Specification-Vendor": "${authorname}",
			"Specification-Version": project.version,
			"Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Implementation-Vendor" :"${authorname}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
	exclude "**/extra/**"
	exclude "**/tests/**"
	exclude "**/internal/BaseEventController**"
	exclude "**/internal/CyanModManifest**"
	exclude "**/internal/ModInfoCache**"
	exclude "**/loader/**"
	exclude "**/modifications/**"
	exclude "**/CyanErrorHandlers**"
	exclude "**/CyanLoader**"
	exclude "**/DownloadWindow**"
	includeEmptyDirs = false
}

task modAPIJar(type: Jar) {
	archiveBaseName = "CyanModding"
	from sourceSets.main.output
	destinationDirectory = file('../build/CyanLoader/API/Mods')
	manifest {
		attributes([
			"Specification-Title": project.name,
			"Specification-Vendor": "${authorname}",
			"Specification-Version": project.version,
			"Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Implementation-Vendor" :"${authorname}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
	exclude "**/extra/**"
	exclude "**/tests/**"
	exclude "**/internal/**"
	exclude "**/loader/**"
	exclude "**/modifications/**"
	exclude "**/CyanErrorHandlers**"
	exclude "**/CyanLoader**"
	exclude "**/DownloadWindow**"
	exclude "**/ICoremod**"
	exclude "**/AbstractCoremod**"
	includeEmptyDirs = false
}

task javaDocs(type: Javadoc) {
	classpath = sourceSets.main.runtimeClasspath
	source = sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: 'javaDocs') {
	from javadoc
	classifier = 'javadoc'
	exclude "**/extra/**"
	destinationDirectory = file('../build/CyanLoader/Javadocs')
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
	exclude "**/extra/**"
	destinationDirectory = file('../build/CyanLoader/Source jars')
}

configurePublish {
	pretty_name "CyanLoader"
	description "Cyan Mod Loader - Loader jar"
	page "https://aerialworks.ddns.net/maven"
	address "https://aerialworks.ddns.net/maven"

	author {
		name "$authorname"
		id "ASF"
	}

	license {
		name "GNU General Public License v2.0"
		url "https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt"
	}

	artifact {
		name 'CyanCoreModding'
		artifact_description 'Cyan Coremod Toolkit (stripped-down cyanloader for development purposes)'
		artifact_version project.version

		task {
			artifact tasks.coremodAPIJar
		}
	}

	artifact {
		name 'CyanModding'
		artifact_description 'Cyan Modding Toolkit (stripped-down cyanloader for development purposes)'
		artifact_version project.version

		task {
			artifact tasks.modAPIJar
		}
	}

	if (!project.file("nogit").exists()) {
		artifact {
			name 'CyanLoader-Sources'
			artifact_description 'Source artifact for the Cyan project, contains the entire source tree'
			artifact_version project.version

			task {
				artifact tasks.createCyanSourceZip
				classifier 'full'
			}
		}
	}

	resource "/log4j2.xml"
}

task prepareSourceZip {
	onlyIf {
		return !file("nogit").exists()
	}
	doLast {
		if (!file("../.git").exists()) {
			def gitcmd = ['git', 'init', '-b', 'main'].execute(null, file(".."))
			gitcmd.waitFor()
			def errorg = gitcmd.errorStream.text.trim()
			if (gitcmd.exitValue() != 0) throw new Exception("Git command failed to execute: "+errorg)

			gitcmd = ['git', 'add', '-A'].execute(null, file(".."))
			gitcmd.waitFor()
			errorg = gitcmd.errorStream.text.trim()
			if (gitcmd.exitValue() != 0) throw new Exception("Git command failed to execute: "+errorg)

			gitcmd = [
				'git',
				'commit',
				'-m',
				'Automated intial commit by Cyan Init for maven zip'
			].execute(null, file(".."))
			gitcmd.waitFor()
			errorg = gitcmd.errorStream.text.trim()
			if (gitcmd.exitValue() != 0) throw new Exception("Git command failed to execute: "+errorg)
		}
		def git = [
			'git',
			'status',
			'--porcelain'
		].execute(null, file(".."))
		git.waitFor()
		def error = git.errorStream.text.trim()
		if (git.exitValue() != 0) throw new Exception("Git command failed to execute: "+error)
		def commited = git.text.trim().equals("")

		if (!commited) {
			git = ['git', 'add', '-A'].execute(null, file(".."))
			git.waitFor()
			error = git.errorStream.text.trim()
			if (git.exitValue() != 0) throw new Exception("Git command failed to execute: "+error)

			git = [
				'git',
				'commit',
				'-m',
				'Automated commit by Cyan Publish'
			].execute(null, file(".."))
			git.waitFor()
			error = git.errorStream.text.trim()
			if (git.exitValue() != 0) throw new Exception("Git command failed to execute: "+error)
		}

		if (file(buildDir.getCanonicalPath()+"/git-output").exists()) delete file(buildDir.getCanonicalPath()+"/git-output")
		git = [
			'git',
			'clone',
			file("..").getCanonicalPath(),
			file(buildDir.getCanonicalPath()+"/git-output").getCanonicalPath()
		].execute()
		git.waitFor()
		error = git.errorStream.text.trim()
		if (git.exitValue() != 0) throw new Exception("Git command failed to execute: "+error)

		if (!commited) {
			git = ['git', 'reset', 'HEAD^'].execute(null, file(".."))
			git.waitFor()
			error = git.errorStream.text.trim()
			if (git.exitValue() != 0) throw new Exception("Git command failed to execute: "+error)
		}
	}
}

artifacts {
	archives sourcesJar
	archives javadocJar
	archives modAPIJar
	archives coremodAPIJar

	if (!file("nogit").exists()) {
		archives createCyanSourceZip
	}
}

test {
	include "**/**Test**"
	exclude "**/**SpecialTest**"
	minHeapSize = "128m"
	maxHeapSize = "2G"
}

task specialTest (type: Test, dependsOn: test) {
	include "**/**SpecialTest**"
	minHeapSize = "128m"
	maxHeapSize = "2G"
}

initializeASFMVNPublish()
