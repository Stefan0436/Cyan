// Main configuration file, shared across projects
// After these two comments, the first 10 lines should not contain code, they must be compatible with bash (ext. is stripped)
ext.minecraft="1.17"
ext.versionType="release"

ext.minmixin="0.7.10"
ext.mixinversion="0.8.3-SNAPSHOT"

ext.timeStartDev="2021-02-07T16:41:37+01:00"

ext.cyanversion="1.0.0.A14"

ext.timeRelease=OffsetDateTime.now().withNano(0).toString()

ext.forgeurltemplate="https://files.minecraftforge.net/maven/net/minecraftforge/forge/%game%-%forgeversion%/forge-%game%-%forgeversion%-installer.jar"

ext.modloader=""
ext.modkit="1.2"

buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven { name = "AerialWorks"; url = "https://aerialworks.ddns.net/maven" }		
	}
	dependencies {
		classpath group: 'com.google.code.gson', name: 'gson', version: '2.8.7'
		classpath group: 'org.asf.cyan', name: 'CCFG', version: '1.0.0.A16'
		classpath group: 'org.asf.aos.util.service', name: 'aosutil-service-SLIB-UTIL', version: '0.0.0.13'
	}
}

import com.google.gson.JsonParser
import com.google.gson.JsonArray

public class Version {

	private ArrayList<VersionSegment> segments = new ArrayList<VersionSegment>();

	protected static class VersionSegment {
		public String data = null;
		public int value = -1;

		public int separator = -1;
		public boolean hasSeparator = false;

		@Override
		public String toString() {
			return data + (separator != -1 ? (char) separator : "");
		}
	}

	protected Version() {
	}

	/**
	 * Parses the given string into a version wrapper instance.
	 *
	 * @param version Version String
	 * @return Version instance.
	 */
	public static Version fromString(String version) {
		Version ver = new Version();
		return ver.parse(version);
	}

	private Version parse(String version) {
		segments.clear();

		boolean lastWasAlpha = false;
		boolean first = true;

		VersionSegment last = new VersionSegment();
		segments.add(last);

		for (char chr : version.toCharArray()) {
			int ch = chr
			if (!first) {
				if (last.data != null) {
					if ((Character.isAlphabetic(ch) && !lastWasAlpha) || (Character.isDigit(ch) && lastWasAlpha)) {
						if (last.data.matches('^[0-9]+$'))
							last.value = Integer.valueOf(last.data);

						last.hasSeparator = true;
						if (last.value == -1 && last.data != null && last.data.length() > 0
								&& Character.isAlphabetic(last.data.charAt(0)))
							last.value = last.data.charAt(0);

						last = new VersionSegment();
						segments.add(last);
					}
				}
			}

			if (!Character.isDigit(ch) && !Character.isAlphabetic(ch)) {
				if (first) {
					continue;
				}

				if (last.data != null) {
					if (last.data.matches('^[0-9]+$'))
						last.value = Integer.valueOf(last.data);

					last.separator = ch;
					last.hasSeparator = true;
					last = new VersionSegment();
					segments.add(last);
				}
				continue;
			}

			if (Character.isAlphabetic(ch) && lastWasAlpha) {
				if (last.value == -1)
					last.value = last.data.charAt(0);
				last.data += ch;
				continue;
			}

			if (last.data == null) {
				last.data = "";
			}
			last.data += ch;

			lastWasAlpha = Character.isAlphabetic(ch);
			first = false;
		}

		if (last.data != null && last.data.matches('^[0-9]+$'))
			last.value = Integer.valueOf(last.data);
		if (last.value == -1 && last.data != null && last.data.length() > 0
				&& Character.isAlphabetic(last.data.charAt(0)))
			last.value = last.data.charAt(0);

		return this;
	}

	/**
	 * Compares this version to another
	 *
	 * @param other Version to compare to
	 * @return 1 if greater, 0 if equal and -1 if less.
	 */
	public int compareTo(Version other) {
		if (isEqualTo(other))
			return 0;
		if (isGreaterThan(other))
			return 1;
		if (isLessThan(other))
			return -1;

		return 0;
	}

	public boolean isEqualTo(Version other) {
		if (other.segments.size() != segments.size())
			return false;

		int i = 0;
		for (VersionSegment segment : segments) {
			VersionSegment otherSegment = other.segments.get(i);
			if (segment.value != otherSegment.value)
				return false;
			i++;
		}

		return true;
	}

	public boolean isGreaterThan(Version other) {
		if (isEqualTo(other))
			return false;
		int i = 0;
		boolean lastWasGreater = false;
		for (VersionSegment segment : segments) {
			if (i >= other.segments.size())
				return true;

			VersionSegment otherSegment = other.segments.get(i);
			if (isSnapshot(otherSegment) && !isSnapshot(segment))
				return true;
			else if (!isSnapshot(segment) && isSnapshot(otherSegment))
				return false;

			if (segment.value < otherSegment.value)
				return false;
			else if (segment.value != otherSegment.value)
				lastWasGreater = true;
			i++;
		}
		if (i < other.segments.size()) {
			if (lastWasGreater)
				return true;
			if (isSnapshot(other.segments.get(i)))
				return true;
			return false;
		}

		return true;
	}

	private boolean isSnapshot(VersionSegment t) {
		return t.toString().toLowerCase().contains("snapshot") || t.toString().toLowerCase().contains("beta")
				|| t.toString().toLowerCase().contains("alpha") || t.toString().toLowerCase().contains("pre");
	}

	public boolean isLessThan(Version other) {
		if (isEqualTo(other))
			return false;
		
		boolean lastWasLess = false;
		int i = 0;
		for (VersionSegment segment : segments) {
			if (i >= other.segments.size()) {
				if (isSnapshot(segment) && !other.segments.stream().anyMatch({ t -> isSnapshot(t) })) {
					break;
				}
				return lastWasLess;
			}

			VersionSegment otherSegment = other.segments.get(i);
			if (isSnapshot(otherSegment) && !isSnapshot(segment))
				return false;
			else if (!isSnapshot(otherSegment) && isSnapshot(segment))
				return true;

			if (segment.value > otherSegment.value)
				return false;
			lastWasLess = segment.value < otherSegment.value;
			
			i++;
		}

		return true;
	}

	public boolean isGreaterOrEqualTo(Version other) {
		int comp = compareTo(other);
		return comp == 1 || comp == 0;
	}

	public boolean isLessOrEqualTo(Version other) {
		int comp = compareTo(other);
		return comp == -1 || comp == 0;
	}

	@Override
	public String toString() {
		String str = "";
		for (VersionSegment segment : segments) {
			str += segment.toString();
		}
		return str;
	}

}

import org.asf.cyan.api.config.Configuration;
public class CyanUpdateInfo extends Configuration<CyanUpdateInfo> {
	public String latestStableVersion;
	public String latestAlphaVersion;
	public String latestBetaVersion;
	public String latestPreviewVersion;

	public String[] longTermSupportVersions;
	public String[] requiredUpgrade;
	
	public HashMap<String, String> libraryVersions = new HashMap<String, String>();
	
	public HashMap<String, String> changelogs = new HashMap<String, String>();
	public HashMap<String, String> allVersions = new HashMap<String, String>();
	public HashMap<String, String> byGameVersions = new HashMap<String, String>();
	
	public HashMap<String, String> forgeSupport = new HashMap<String, String>();
	public HashMap<String, String> fabricSupport = new HashMap<String, String>();
	public HashMap<String, String> paperSupport = new HashMap<String, String>();
	
	
	public HashMap<String, String> paperByMappings = new HashMap<String, String>();
	
	public HashMap<String, String> spigotStableMappings = new HashMap<String, String>();
	public HashMap<String, String> spigotLatestMappings = new HashMap<String, String>();
	public HashMap<String, String> spigotTestingMappings = new HashMap<String, String>();
	
	public CyanUpdateInfo(String content) {
		readAll(content);
	}

	@Override
	public String filename() {
		return null;
	}

	@Override
	public String folder() {
		return null;
	}
}

gradle.allprojects {	
	if (project.hasProperty("overrideGameVersion")) {
		ext.minecraft=project.getProperty("overrideGameVersion")
	}
	
    def majorversion = minecraft
    if (majorversion.split("\\.").length >= 3)
        majorversion = majorversion.substring(0, majorversion.lastIndexOf("."))

    ext.useJava16 = Version.fromString(majorversion).isGreaterOrEqualTo(Version.fromString("1.17"))
    if (Version.fromString(majorversion).isGreaterOrEqualTo(Version.fromString("1.17")) && JavaVersion.current().compareTo(JavaVersion.VERSION_16) != 0 && JavaVersion.current().compareTo(JavaVersion.VERSION_16) != 1){		
        throw new RuntimeException("Cyan for Minecraft 1.17 requires Java 16 or greater.")
    }

	ext.exactgameversion=minecraft
	if (project.hasProperty("setModLoader")) {
		ext.modloader=project.getProperty("setModLoader")
	}
	if (project.hasProperty("setInheritsFromVersion")) {
		ext.exactgameversion=project.getProperty("setInheritsFromVersion")
	}
	if (project.hasProperty("overrideReleaseType")) {
		ext.versionType=project.getProperty("overrideReleaseType")
	}
	if (project.hasProperty("overrideMixinVersion")) {
		ext.mixinversion=project.getProperty("overrideMixinVersion")
	}
	if (project.hasProperty("overrideMinMixinVersion")) {
		ext.minmixin=project.getProperty("overrideMinMixinVersion")
	}	
	
    ext.craftBukkitPOMUrl = "https://hub.spigotmc.org/stash/projects/SPIGOT/repos/craftbukkit/raw/pom.xml?at=%commit%"
    ext.spigotInfoUrl = "https://hub.spigotmc.org/versions/%mcver%.json";

    if (modloader.startsWith("paper-")) {
        def infoPath = "/org/asf/cyan/CyanVersionHolder/generic/CyanVersionHolder-generic-versions.ccfg";
        def paperversion = modloader.substring("paper-".length())
        if (paperversion.equals("latestsupported")) {
            def useurl = "https://aerialworks.ddns.net/maven"
            StringBuilder conf = new StringBuilder();
            URL u = new URL(useurl + infoPath);
            Scanner sc = new Scanner(u.openStream());
            while (sc.hasNext())
            conf.append(sc.nextLine()+System.lineSeparator());
            sc.close();

            CyanUpdateInfo info = new CyanUpdateInfo(conf.toString())
            def mappingsVersion = info.spigotTestingMappings.get(minecraft)
            def paper = ""
            
            if (mappingsVersion == null) {
                mappingsVersion = getLatestSpigotMappings(minecraft)
            }
            
            paper = info.paperByMappings.get(mappingsVersion)
            if (paper == null) {
                URL url = new URL("https://papermc.io/api/v2/projects/paper/versions/" + minecraft);
                InputStream strm = url.openStream()
                JsonArray builds = JsonParser.parseString(new String(strm.readAllBytes())).getAsJsonObject().get("builds").getAsJsonArray();
                strm.close()
                
                paper = builds.get(builds.size() - 1).getAsString();
            }
            
            modloader = "paper-" + paper
			ext.mappingsVersion = mappingsVersion
        }
    }
    
    def modloaderVersion = minecraft
    if (modloader.startsWith("paper-")) {
        modloaderVersion = modloader.substring("paper-".length());
    } else if (modloader.startsWith("forge-")) {
        modloaderVersion = modloader.substring("forge-".length());
    } else if (modloader.startsWith("fabric-loader-")) {
        modloaderVersion = modloader.substring("fabric-loader-".length());
    }
    ext.exactgameversion = exactgameversion.replace("%modloader%", modloaderVersion)
	
	ext.getCacheRoot = { ->
		return getGradle().getGradleUserHomeDir().listFiles(new FilenameFilter() {
	
			@Override
			public boolean accept(File file, String name) {
				if (name.equals("caches"))
					return true;
				return false;
			}
	
		})[0].getCanonicalFile();
	}	
    
}
